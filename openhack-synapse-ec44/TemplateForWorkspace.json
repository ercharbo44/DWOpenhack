{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "openhack-synapse-ec44"
		},
		"FourthCoffee_FileSystem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FourthCoffee_FileSystem'"
		},
		"Southridge_Cosmos_Movies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Southridge_Cosmos_Movies'"
		},
		"Southridge_SQL_Server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Southridge_SQL_Server'"
		},
		"Southridge_SQL_Server_Streaming_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Southridge_SQL_Server_Streaming'"
		},
		"VanArdels_SQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'VanArdels_SQLServer'"
		},
		"openhack-synapse-ec44-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'openhack-synapse-ec44-WorkspaceDefaultSqlServer'"
		},
		"FourthCoffee_FileSystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Rentals"
		},
		"FourthCoffee_FileSystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "openhackadmin"
		},
		"openhack-synapse-ec44-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://openhackec44.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_CloudSales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_k48",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_k48",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawzone/CloudSales/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_k48",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_k48",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "OrderDetails"
								},
								"destination": {
									"fileName": "dboOrderDetails.txt"
								}
							},
							{
								"source": {
									"table": "Orders"
								},
								"destination": {
									"fileName": "dboOrders.txt"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-08T13:21:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_k48')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_k48')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_CloudSreaming')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_y6g",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_y6g",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawzone/CloudStreaming/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_y6g",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_y6g",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.csv"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.csv"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_y6g')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_y6g')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_FouthCoffee')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_yj8",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "/"
							},
							{
								"name": "Destination",
								"value": "rawzone/FouthCoffee/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_yj8",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_yj8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-09T08:14:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_yj8')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_yj8')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_Movies')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_w9d",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "movies"
							},
							{
								"name": "Destination",
								"value": "rawzone/Movies/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_w9d",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_w9d",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-12-08T14:00:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_w9d')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_w9d')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_VanArdel_parquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_s9j",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_s9j",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawzone/VanArsdelLTD/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_s9j",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_s9j",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Actors"
								},
								"destination": {
									"fileName": "dboActors.parquet"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.parquet"
								}
							},
							{
								"source": {
									"table": "MovieActors"
								},
								"destination": {
									"fileName": "dboMovieActors.parquet"
								}
							},
							{
								"source": {
									"table": "Movies"
								},
								"destination": {
									"fileName": "dboMovies.parquet"
								}
							},
							{
								"source": {
									"table": "OnlineMovieMappings"
								},
								"destination": {
									"fileName": "dboOnlineMovieMappings.parquet"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.parquet"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_s9j')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_s9j')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_VanArsdel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_xpk",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_xpk",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawzone/VanArsdelLTD/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_xpk",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_xpk",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Actors"
								},
								"destination": {
									"fileName": "dboActors.txt"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.txt"
								}
							},
							{
								"source": {
									"table": "MovieActors"
								},
								"destination": {
									"fileName": "dboMovieActors.txt"
								}
							},
							{
								"source": {
									"table": "Movies"
								},
								"destination": {
									"fileName": "dboMovies.txt"
								}
							},
							{
								"source": {
									"table": "OnlineMovieMappings"
								},
								"destination": {
									"fileName": "dboOnlineMovieMappings.txt"
								}
							},
							{
								"source": {
									"table": "Transactions"
								},
								"destination": {
									"fileName": "dboTransactions.txt"
								}
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-08T17:39:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_xpk')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_xpk')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_cloudsales2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach_oyd",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_oyd",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "rawzone/CloudSales/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_oyd",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_oyd",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Addresses"
								},
								"destination": {
									"fileName": "dboAddresses.csv"
								}
							},
							{
								"source": {
									"table": "Customers"
								},
								"destination": {
									"fileName": "dboCustomers.csv"
								}
							},
							{
								"source": {
									"table": "OrderDetails"
								},
								"destination": {
									"fileName": "dboOrderDetails.csv"
								}
							},
							{
								"source": {
									"table": "Orders"
								},
								"destination": {
									"fileName": "dboOrders.csv"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_oyd')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_oyd')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VanArsdelRental": {},
									"FourthCoffee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rental Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Rentals Pipeline",
				"activities": [
					{
						"name": "Dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VanArsdelRental": {},
									"FourthCoffee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SalesOrders_Details')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dataflow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SalesOrders",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Salescloud": {},
									"DetailCloud": {},
									"Ordersdetail": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/SalesOrders')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrders.csv",
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "String"
					},
					{
						"name": "ShipDate",
						"type": "String"
					},
					{
						"name": "TotalCost",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrderDetails.csv",
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "OrderDetailID",
						"type": "String"
					},
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "MovieID",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "UnitCost",
						"type": "String"
					},
					{
						"name": "LineNumber",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_6pr')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "VanArsdelLTD",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy",
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\"",
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_asp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CloudStreaming",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_dm2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CloudStreaming",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_k48')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_oyd')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_s9j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "VanArsdelLTD",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_w9d')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Movies",
						"fileSystem": "rawzone"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_xpk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "VanArsdelLTD",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_y6g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": "CloudStreaming",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_yj8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "FouthCoffee",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Details')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrderDetails.csv",
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fourthcoffeerental')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Transactions.csv",
						"folderPath": "FouthCoffee",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "MovieID",
						"type": "String"
					},
					{
						"name": "RentalDate",
						"type": "String"
					},
					{
						"name": "ReturnDate",
						"type": "String"
					},
					{
						"name": "RentalCost",
						"type": "String"
					},
					{
						"name": "LateFee",
						"type": "String"
					},
					{
						"name": "RewindFlag",
						"type": "String"
					},
					{
						"name": "CreatedDate",
						"type": "String"
					},
					{
						"name": "UpdatedDate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Orders')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboOrders.csv",
						"folderPath": "CloudSales",
						"fileSystem": "rawzone"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OrdersParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Normalized/Orders",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RentalParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dboTransactions.parquet",
						"folderPath": "VanArsdelLTD",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "UTF8"
					},
					{
						"name": "CustomerID",
						"type": "UTF8"
					},
					{
						"name": "MovieID",
						"type": "UTF8"
					},
					{
						"name": "RentalDate",
						"type": "INT32"
					},
					{
						"name": "ReturnDate",
						"type": "INT32"
					},
					{
						"name": "RentalCost",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LateFee",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "RewindFlag",
						"type": "BOOLEAN"
					},
					{
						"name": "CreatedDate",
						"type": "DATE"
					},
					{
						"name": "UpdatedDate",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rentals')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhack-synapse-ec44-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Normalized/Rentals",
						"fileSystem": "rawzone"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SourceSystemId",
						"type": "UTF8"
					},
					{
						"name": "SourceSystemMovieId",
						"type": "UTF8"
					},
					{
						"name": "SouthridgeMovieId",
						"type": "UTF8"
					},
					{
						"name": "PhysicalAvailabilityDate",
						"type": "INT96"
					},
					{
						"name": "StreamingAvailabilityDate",
						"type": "INT96"
					},
					{
						"name": "Genre",
						"type": "UTF8"
					},
					{
						"name": "Title",
						"type": "UTF8"
					},
					{
						"name": "Rating",
						"type": "UTF8"
					},
					{
						"name": "RuntimeMinutes",
						"type": "INT64"
					},
					{
						"name": "TheatricalReleaseYear",
						"type": "INT64"
					},
					{
						"name": "ActorName",
						"type": "UTF8"
					},
					{
						"name": "ActorId",
						"type": "UTF8"
					},
					{
						"name": "ActorGender",
						"type": "UTF8"
					},
					{
						"name": "CatalogId",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/openhack-synapse-ec44-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_6pr')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VanArdels_SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/VanArdels_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_asp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_SQL_Server_Streaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_SQL_Server_Streaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_dm2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_SQL_Server_Streaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_SQL_Server_Streaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_k48')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_SQL_Server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_SQL_Server')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_oyd')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_SQL_Server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_SQL_Server')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_s9j')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VanArdels_SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/VanArdels_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_w9d')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_Cosmos_Movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"actors": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									}
								}
							}
						},
						"availabilityDate": {
							"type": "string"
						},
						"genre": {
							"type": "string"
						},
						"rating": {
							"type": "string"
						},
						"releaseYear": {
							"type": "integer"
						},
						"runtime": {
							"type": "integer"
						},
						"streamingAvailabilityDate": {
							"type": "string"
						},
						"tier": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						}
					}
				},
				"typeProperties": {
					"collectionName": "movies"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_Cosmos_Movies')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_xpk')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "VanArdels_SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/VanArdels_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_y6g')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Southridge_SQL_Server_Streaming",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Southridge_SQL_Server_Streaming')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_yj8')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FourthCoffee_FileSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ActorID",
						"type": "String"
					},
					{
						"name": "ActorName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/FourthCoffee_FileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FourthCoffee_FileSystem')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FourthCoffee_FileSystem_properties_typeProperties_host')]",
					"userId": "[parameters('FourthCoffee_FileSystem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FourthCoffee_FileSystem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IRFouthCoffee",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IRFouthCoffee')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridge_Cosmos_Movies')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('Southridge_Cosmos_Movies_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridge_SQL_Server')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Southridge_SQL_Server_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Southridge_SQL_Server_Streaming')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Southridge_SQL_Server_Streaming_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VanArdels_SQLServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('VanArdels_SQLServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IRVanArseldLMT",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IRVanArseldLMT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/openhack-synapse-ec44-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('openhack-synapse-ec44-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/openhack-synapse-ec44-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('openhack-synapse-ec44-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IRFouthCoffee')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IRVanArseldLMT')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RentalParquet",
								"type": "DatasetReference"
							},
							"name": "VanArsdelRental"
						},
						{
							"dataset": {
								"referenceName": "Fourthcoffeerental",
								"type": "DatasetReference"
							},
							"name": "FourthCoffee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Rentals",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddSystemIDVanArsdel"
						},
						{
							"name": "AddSystemIDFourthCoffee"
						},
						{
							"name": "SelectVanArsdel"
						},
						{
							"name": "Select4Coffeefields"
						},
						{
							"name": "Union"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as integer,\n\t\tReturnDate as integer,\n\t\tRentalCost as decimal(19,4),\n\t\tLateFee as decimal(19,4),\n\t\tRewindFlag as boolean,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanArsdelRental\nsource(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as string,\n\t\tReturnDate as string,\n\t\tRentalCost as string,\n\t\tLateFee as string,\n\t\tRewindFlag as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffee\nVanArsdelRental derive(RentalDate = toDate(RentalDate),\n\t\tReturnDate = toDate(RentalDate),\n\t\tSourceID = 2,\n\t\tUniqueTransactionID = concat(toString(2), toString(uuid())),\n\t\tUniqueCustomerID = concat(toString(2), CustomerID),\n\t\tUniqueMovieID = concat(toString(2), MovieID),\n\t\tLateFee = toFloat(LateFee)) ~> AddSystemIDVanArsdel\nFourthCoffee derive(CreatedDate = toDate(CreatedDate),\n\t\tUpdatedDate = toDate(UpdatedDate),\n\t\tRentalCost = toFloat(RentalCost),\n\t\tLateFee = toFloat(LateFee),\n\t\tSourceId = 3,\n\t\tUniqueTransactionID = concat(toString(3), toString(uuid())),\n\t\tModifiedRentaldate = toDate(substring(RentalDate, 1,4)+\"-\"+substring(RentalDate, 5,2)+\"-\"+substring(RentalDate, 7,2)),\n\t\tModifiedReturnDate = toDate(substring(ReturnDate, 1,4)+\"-\"+substring(ReturnDate, 5,2)+\"-\"+substring(ReturnDate, 7,2)),\n\t\tUniqueCustomerID = concat(toString(3), CustomerID),\n\t\tUniqueMovieID = concat(toString(3),MovieID),\n\t\tRewindFlag = toBinary(RewindFlag)) ~> AddSystemIDFourthCoffee\nAddSystemIDVanArsdel select(mapColumn(\n\t\tSourceID,\n\t\tUniqueTransactionID,\n\t\tTransactionID,\n\t\tUniqueCustomerID,\n\t\tCustomerID,\n\t\tUniqueMovieID,\n\t\tMovieID,\n\t\tRentalDate,\n\t\tReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tCreatedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVanArsdel\nAddSystemIDFourthCoffee select(mapColumn(\n\t\tSourceID = SourceId,\n\t\tUniqueTransactionID,\n\t\tTransactionID,\n\t\tUniqueCustomerID,\n\t\tCustomerID,\n\t\tUniqueMovieID,\n\t\tMovieID,\n\t\tRentalDate = ModifiedRentaldate,\n\t\tReturnDate = ModifiedReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tCreatedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4Coffeefields\nSelectVanArsdel, Select4Coffeefields union(byName: true)~> Union\nUnion sink(input(\n\t\tSourceSystemId as string,\n\t\tSourceSystemMovieId as string,\n\t\tSouthridgeMovieId as string,\n\t\tPhysicalAvailabilityDate as timestamp,\n\t\tStreamingAvailabilityDate as timestamp,\n\t\tGenre as string,\n\t\tTitle as string,\n\t\tRating as string,\n\t\tRuntimeMinutes as long,\n\t\tTheatricalReleaseYear as long,\n\t\tActorName as string,\n\t\tActorId as string,\n\t\tActorGender as string,\n\t\tCatalogId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RentalParquet')]",
				"[concat(variables('workspaceId'), '/datasets/Fourthcoffeerental')]",
				"[concat(variables('workspaceId'), '/datasets/Rentals')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SalesOrders')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "Salescloud"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "DetailCloud"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdersParquet",
								"type": "DatasetReference"
							},
							"name": "Ordersdetail"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Selectorderfields"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\tOrderID as string,\n\t\tCustomerID as string,\n\t\tOrderDate as date,\n\t\tShipDate as date,\n\t\tTotalCost as float,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Salescloud\nsource(output(\n\t\tOrderDetailID as string,\n\t\tOrderID as string,\n\t\tMovieID as string,\n\t\tQuantity as integer,\n\t\tUnitCost as float,\n\t\tLineNumber as integer,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DetailCloud\nSelectorderfields, Select1 join(Selectorderfields@OrderID == Select1@OrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(SourcedID = 1,\n\t\tUniqueOrderID = concat('1', OrderDetailID),\n\t\tUniqueMovieID = concat('1',MovieID),\n\t\tUniqueCustomerID = concat('1',CustomerID)) ~> DerivedColumn1\nSalescloud select(mapColumn(\n\t\tOrderID,\n\t\tCustomerID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTotalCost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Selectorderfields\nDetailCloud select(mapColumn(\n\t\tOrderDetailID,\n\t\tOrderID,\n\t\tMovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 select(mapColumn(\n\t\tSourceID = SourcedID,\n\t\tUniqueOrderID,\n\t\tOrderID = Select1@OrderID,\n\t\tShipDate = OrderDetailID,\n\t\tTotalCost,\n\t\tOrderDetailID,\n\t\tUniqueMovieID,\n\t\tMovieID,\n\t\tQuantity,\n\t\tUnitCost,\n\t\tLineNumber,\n\t\tCustomerID,\n\t\tUniqueCustomerID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tTotalCost\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Ordersdetail"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText2')]",
				"[concat(variables('workspaceId'), '/datasets/OrdersParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateNumber')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[Numbers] (\n    [Number] INT NOT NULL\n) \nWITH (Clustered Columnstore Index, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimActors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE dbo.DimActors;\n\nCREATE TABLE [dbo].[DimActors] (\n    [ActorSK]     INT              NOT NULL,\n    [ActorID]     UNIQUEIDENTIFIER,\n    [ActorName]   VARCHAR (81)     NOT NULL,\n    [ActorGender] CHAR (1)  \n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCategories')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimCategories] (\n    [MovieCategorySK]          TINYINT      NOT NULL,\n    [MovieCategoryDescription] VARCHAR (50) NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomers')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimCustomers] (\n    [CustomerSK]      INT              NOT NULL,\n    [CustomerID]      UNIQUEIDENTIFIER NOT NULL,\n    [LastName]        VARCHAR (50)     NOT NULL,\n    [FirstName]       VARCHAR (30)     NOT NULL,\n    [AddressLine1]    VARCHAR (50)     NOT NULL,\n    [AddressLine2]    VARCHAR (50)     NULL,\n    [City]            VARCHAR (30)     NOT NULL,\n    [State]           CHAR (2)         NOT NULL,\n    [ZipCode]         CHAR (5)         NOT NULL,\n    [PhoneNumber]     CHAR (10)        NOT NULL,\n    [RecordStartDate] DATE             NOT NULL,\n    [RecordEndDate]   DATE             NULL,\n    [ActiveFlag]      BIT              NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH([CustomerSK]));\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimDate] (\n    [DateSK]         INT      NOT NULL,\n    [DateValue]      DATE     NOT NULL,\n    [DateYear]       SMALLINT NOT NULL,\n    [DateMonth]      TINYINT  NOT NULL,\n    [DateDay]        TINYINT  NOT NULL,\n    [DateDayOfWeek]  TINYINT  NOT NULL,\n    [DateDayOfYear]  SMALLINT NOT NULL,\n    [DateWeekOfYear] TINYINT  NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimLocation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimLocation] (\n    [LocationSK]   SMALLINT     NOT NULL,\n    [LocationName] VARCHAR (50) NOT NULL,\n    [Streaming]    BIT          NOT NULL,\n    [Rentals]      BIT          NOT NULL,\n    [Sales]        BIT          NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimMoviesActors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimMovieActors] (\n    [MovieID] UNIQUEIDENTIFIER NOT NULL,\n    [ActorID] UNIQUEIDENTIFIER NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimRatings')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimRatings] (\n    [MovieRatingSK]          TINYINT     NOT NULL,\n    [MovieRatingDescription] VARCHAR (5) NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimTime')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[DimTime] (\n    [TimeSK]          INT      NOT NULL,\n    [TimeValue]       TIME (7) NOT NULL,\n    [TimeHour]        TINYINT  NOT NULL,\n    [TimeMinute]      TINYINT  NOT NULL,\n    [TimeSecond]      TINYINT  NOT NULL,\n    [TimeMinuteOfDay] SMALLINT NOT NULL,\n    [TimeSecondOfDay] INT      NOT NULL\n)\nWITH (HEAP, DISTRIBUTION = REPLICATE);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FactRentals')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[FactRentals] (\n    [RentalSK]       INT              NOT NULL,\n    [TransactionID]  UNIQUEIDENTIFIER NOT NULL,\n    [CustomerSK]     INT              NOT NULL,\n    [LocationSK]     SMALLINT         NOT NULL,\n    [MovieSK]        INT              NOT NULL,\n    [RentalDateSK]   INT              NOT NULL,\n    [ReturnDateSK]   INT              NULL,\n    [RentalDuration] TINYINT          NULL,\n    [RentalCost]     MONEY            NOT NULL,\n    [LateFee]        MONEY            NULL,\n    [TotalCost]      MONEY            NULL,\n    [RewindFlag]     BIT              NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH([CustomerSK]));\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FactSales')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[FactSales] (\n    [SalesSK]      INT              NOT NULL,\n    [OrderID]      UNIQUEIDENTIFIER NOT NULL,\n    [LineNumber]   TINYINT          NOT NULL,\n    [OrderDateSK]  INT              NOT NULL,\n    [ShipDateSK]   INT              NULL,\n    [CustomerSK]   INT              NOT NULL,\n    [LocationSK]   SMALLINT         NOT NULL,\n    [MovieSK]      INT              NOT NULL,\n    [DaysToShip]   TINYINT          NULL,\n    [Quantity]     TINYINT          NOT NULL,\n    [UnitCost]     MONEY            NOT NULL,\n    [ExtendedCost] MONEY            NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH([CustomerSK]));",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FactStreaming')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[FactStreaming] (\n    [StreamingSK]       INT              NOT NULL,\n    [TransactionID]     UNIQUEIDENTIFIER NOT NULL,\n    [CustomerSK]        INT              NOT NULL,\n    [MovieSK]           INT              NOT NULL,\n    [StreamStartDateSK] INT              NOT NULL,\n    [StreamStartTimeSK] INT              NOT NULL,\n    [StreamEndDateSK]   INT              NULL,\n    [StreamEndTimeSK]   INT              NULL,\n    [StreamDurationSec] INT              NULL,\n    [StreamDurationMin] DECIMAL (10, 4)  NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH([CustomerSK]));",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Populate DimDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "INSERT INTO dbo.DimDate\n(DateSK, DateValue, DateYear, DateMonth, DateDay, DateDayOfWeek, DateDayOfYear, DateWeekOfYear)\nSELECT \n\tNumber AS DateSK,\n\tDateValue, \n\tYEAR(DateValue) AS DateYear,\n\tMONTH(DateValue) AS DateMonth,\n\tDAY(DateValue) AS DateDay,\n\tDATEPART(WeekDay, DateValue) AS DateDayOfWeek,\n\tDATEPART(DayOfYear, DateValue) AS DateDayOfYear,\n\tDATEPART(Week, DateValue) AS DateWeekOfYear\nFROM\n(\n\tSELECT Number, DATEADD(d, Number - 1, '2017-01-01') AS DateValue\n\tFROM\n\t(\n\t\tSELECT Number\n\t\tFROM dbo.Numbers\n\t\tWHERE Number <= 365\n\t) AS N\n) AS D;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Populate Number')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Declare local variables...\nDECLARE\n\t@MaxNumber integer = 1;\n\n-- Insert the seed number...\nINSERT INTO dbo.Numbers\n(Number)\nVALUES\n(1);\n\n-- Loop through and insert additional data up to 1,048,576...\nWHILE (@MaxNumber < 1000000)\nBEGIN\n\tINSERT INTO dbo.Numbers\n\t(Number)\n\tSELECT Number + @MaxNumber\n\tFROM dbo.Numbers;\n\n\tSELECT @MaxNumber = MAX(Number)\n\tFROM dbo.Numbers;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Create external data source ADLSHack2\nWITH \n( LOCATION = 'abfss://rawzone@openhackec44.dfs.core.windows.net',\n\tTYPE = HADOOP\n)\n\nCREATE EXTERNAL FILE FORMAT csv\nWith\n( FORMAT_TYPE = DELIMITEDTEXT,\n  FORMAT_OPTIONS (\n\tFIELD_TERMINATOR = '|'\n    )\n)\n\nCREATE EXTERNAL FILE FORMAT Parquet WITH (FORMAT_TYPE = PARQUET)\nGO\n\n\nDROP external table ext_catalog\nCREATE EXTERNAL TABLE ext_catalog\n(\n        [SourceSystemId] VARCHAR(2),\n\t\t[SourceSystemMovieId] VARCHAR(38),\n\t\t[SouthridgeMovieId] VARCHAR(38),\n\t\t[PhysicalAvailabilityDate] DATETIME,\n\t\t[StreamingAvailabilityDate] DATETIME,\n\t\t[Genre] VARCHAR(50),\n\t\t[Title] VARCHAR(255),\n\t\t[Rating] VARCHAR(10),\n\t\t[RuntimeMinutes] BIGINT,\n\t\t[TheatricalReleaseYear] BIGINT,\n        [ActorName] VARCHAR(100),\n\t\t[ActorId] VARCHAR(38),\n        [ActorGender] CHAR(1),\n\t\t[CatalogId] VARCHAR(38)\n)\nWITH\n(\n    LOCATION = N'Normalized/catalog',\n    DATA_SOURCE = ADLSHack2,\n    FILE_FORMAT = Parquet,\n    REJECT_TYPE = VALUE,\n    REJECT_VALUE = 0\n)\nGO\n\nselect top 5 * from ext_catalog\n\n---------------------------DIM RATING--------------------------------------------------------------------\nSELECT DISTINCT [Rating] FROM ext_Catalog\n\n-- Output: PG-13, G, R, PG=13, PG\n-- Notice the typo of PG=13. The business would likely want to cleanse this for reporting purposes.\n\nDECLARE @MaxSK INTEGER;\nSELECT @MaxSK = ISNULL(MAX(MovieRatingSK),0) FROM [dbo].DimRatings\n\nINSERT INTO [dbo].DimRatings(\n\tMovieRatingDescription,\n\tMovieRatingSK)\nSELECT * FROM (\n\tSELECT \n\t\tc.Rating AS MovieRatingDescription,\n\t\t@MaxSK + ROW_NUMBER() OVER (ORDER BY c.Rating) AS MovieRatingSK\n\tFROM \n\t\t(SELECT\n\t\t\tDISTINCT CASE\n\t\t\t\tWHEN [Rating] = 'PG=13' THEN 'PG-13'\n\t\t\t\tELSE [Rating]\n\t\t\tEND AS Rating\n\t\tFROM\n\t\t\text_catalog) c\n) CleansedRatings\nWHERE\n\tCleansedRatings.MovieRatingDescription NOT IN (SELECT MovieRatingDescription FROM [dbo].DimRatings)\n\nSELECT * FROM [dbo].DimRatings\n\n---------------------------DIM Actors--------------------------------------------------------------------\nDECLARE @MaxSK INTEGER;\nSELECT @MaxSK = ISNULL(MAX(ActorSK),0) FROM [dbo].DimActors\n\nINSERT INTO dimActors\n\tSELECT @MaxSK + ROW_NUMBER() OVER (ORDER BY ActorID)\n    AS ActorSK,ActorID,ActorName,ActorGender from ext_catalog\n\nSELECT * from dimActors\n\n---------------------------DIM Actors--------------------------------------------------------------------\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "openhackdec44",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Intermediate_Catalog')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Openhackspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e6fcac13-b9bc-4f47-af3e-dfa48d717c6d/resourceGroups/mdw-oh-01-westeurope/providers/Microsoft.Synapse/workspaces/openhack-synapse-ec44/bigDataPools/Openhackspark",
						"name": "Openhackspark",
						"type": "Spark",
						"endpoint": "https://openhack-synapse-ec44.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Openhackspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": {},
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"import uuid\n",
							"import pyspark.sql.functions as F\n",
							"from pyspark.sql.functions import col\n",
							"from pyspark.sql.types import StringType,DateType,LongType,IntegerType,TimestampType"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Collect the raw catalog data from all three source systems"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## From Fourth Coffee"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"fc_movies = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/FouthCoffee/Movies.csv\", header='true', inferSchema='true')\n",
							"fc_actors = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/FouthCoffee/Actors.csv\", header='true', inferSchema='true')\n",
							"fc_movie_actors = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/FouthCoffee/MovieActors.csv\", header='true', inferSchema='true')\n",
							"fc_mappings = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/FouthCoffee/OnlineMovieMappings.csv\", header='true', inferSchema='true')\n",
							"\n",
							"# Use the MovieActors data to join the actor information. Left join to preserve movies where the actors are not found\n",
							"# Use the OnlineMovieMappings data to bring in the ids of movies which are also found in the Southridge Video catalog,\n",
							"# again using the left join to preserve movies which are not matched.\n",
							"\n",
							"fc_catalog = fc_movies \\\n",
							"  .join(fc_movie_actors, on='MovieId', how='left') \\\n",
							"  .join(fc_actors, on='ActorId', how='left') \\\n",
							"  .join(fc_mappings, on='MovieId', how='left')"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Cell title\n"
						],
						"attachments": {}
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"fc_catalog.head(10)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## From VanArsdel"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"va_movies = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboMovies.parquet\")\n",
							"va_actors = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboActors.parquet\")\n",
							"va_movie_actors = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboMovieActors.parquet\")\n",
							"va_mappings = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboOnlineMovieMappings.parquet\")\n",
							"\n",
							"# Use the MovieActors data to join the actor information. Left join to preserve movies where the actors are not found\n",
							"# Use the OnlineMovieMappings data to bring in the ids of movies which are also found in the Southridge Video catalog,\n",
							"# again using the left join to preserve movies which are not matched.\n",
							"\n",
							"va_catalog = va_movies \\\n",
							"  .join(va_movie_actors, on='MovieId', how='left') \\\n",
							"  .join(va_actors, on='ActorId', how='left') \\\n",
							"  .join(va_mappings, on='MovieId', how='left')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"va_catalog.head(5)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## From Southridge"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# After reading the JSON, explode the actors array to create multiple rows per movie, each having a single actor name\n",
							"# Drop the original actors array, as it is then no longer needed\n",
							"# Also drop the Cosmos DB metadata, as it will not be valuable here\n",
							"\n",
							"sr_catalog = spark.read.json(\"abfss://rawzone@openhackec44.dfs.core.windows.net/Movies/movies.json\") \\\n",
							"  .withColumn('actor', F.explode('actors')) \\\n",
							"  .drop('actors', '_attachments', '_etag', '_rid', '_self', '_ts')"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"sr_catalog.head(5)\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# Observe inconsistencies in the data types and formats\n",
							"\n",
							"Let's take a look at the following discrepencies which could cause fatal errors in downstream processing."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Release dates and availability dates\n",
							"\n",
							"FourthCoffee and VanArsdel, Ltd. both seem to track the ReleaseDate for each movie. These are stored as strings, and we'll need to look into the formats they've used.\n",
							"\n",
							"Southridge Video is storing a releaseYear, an availabilityDate, and a streamingAvailabilityDate."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"fc_dates = fc_catalog.select(col('ReleaseDate').alias('FcReleaseDate'), col('MovieId'), col('OnlineMovieId'))\n",
							"va_dates = va_catalog.select(col('ReleaseDate').alias('VaReleaseDate'), col('MovieId'), col('OnlineMovieId'))\n",
							"sr_dates = sr_catalog.select(*['id', 'releaseYear', 'availabilityDate', 'streamingAvailabilityDate'])\n",
							"\n",
							"joined_dates = sr_dates \\\n",
							"  .join(fc_dates, F.upper(sr_dates.id) == fc_dates.OnlineMovieId, how='left') \\\n",
							"  .join(va_dates, sr_dates.id == va_dates.OnlineMovieId, how='left')\n",
							"\n",
							"joined_dates \\\n",
							"  .filter('FcReleaseDate is not null AND VaReleaseDate is not null') \\\n",
							"  .limit(1) \\\n",
							"  .collect()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"### Looking at the dates\n",
							"\n",
							"```text\n",
							"[Row(id='300e034e-4260-49ed-85e2-39a8d5030713',\n",
							"    releaseYear=2015,\n",
							"    availabilityDate='2017-07-25 00:00:00',\n",
							"    streamingAvailabilityDate='2017-09-19 00:00:00',\n",
							"    FcReleaseDate='07-25-2017',\n",
							"    OnlineMovieId='300E034E-4260-49ED-85E2-39A8D5030713',\n",
							"    VaReleaseDate='07-25-2017',\n",
							"    OnlineMovieId='300e034e-4260-49ed-85e2-39a8d5030713')]\n",
							"```\n",
							"\n",
							"Above, we see that:  \n",
							"  - Southridge has recorded a 2015 releaseYear for this movie\n",
							"  - Southridge has recorded that the movie is available as of 25 Jul 2017\n",
							"  - Southridge has recorded that the movie is available for streaming as of 19 Sep 2017\n",
							"  - Fourth Coffee has recorded that the movie has a ReleaseDate of 25 Jul 2017\n",
							"  - VanArsdel, Ltd. has similarly recorded the ReleaseDate as 25 Jul 2017\n",
							"\n",
							"It looks like Fourth Coffee is tracking the \"release\" in terms of when it became available to rent. Only Southridge Video has tracked the original theatrical release year. This detail was useful for their web-based front-end, but the brick and mortar stores previously had no business need for it.\n",
							"\n",
							"Each of the source system has stored dates in different formats, but we will use true date types in our conformed intermediate schema."
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"> Note: We are not only parsing the dates here, but also adding a column to track the SourceSystemId"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"fc_catalog = fc_catalog \\\n",
							"  .withColumn('ReleaseDate', F.to_date(col('ReleaseDate'), 'MM-dd-yyyy')) \\\n",
							"  .withColumn('SourceSystemId', F.lit('FC'))\n",
							"\n",
							"va_catalog = va_catalog \\\n",
							"  .withColumn('ReleaseDate', F.to_date(col('ReleaseDate'), 'MM-dd-yyyy')) \\\n",
							"  .withColumn('SourceSystemId', F.lit('VA'))\n",
							"\n",
							"sr_catalog = sr_catalog \\\n",
							"  .withColumn('availabilityDate', F.to_date(col('availabilityDate'), 'yyyy-MM-dd HH:mm:ss')) \\\n",
							"  .withColumn('streamingAvailabilityDate', F.to_date(col('streamingAvailabilityDate'), 'yyyy-MM-dd HH:mm:ss')) \\\n",
							"  .withColumn('SourceSystemId', F.lit('SR'))"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Unioning the data\n",
							"\n",
							"### Target schema\n",
							"\n",
							"Looking ahead, we will keep every source record from every catalog, so we don't need to join here.\n",
							"However, we will need to map columns to a consistent schema.\n",
							"\n",
							"```\n",
							"SourceSystemId:              Use the SourceSystemId we added in the previous cell.\n",
							"CatalogId:                   Use a new unique identifier.\n",
							"SourceSystemMovieId:         From Southridge, use the source id. From the others, use the source MovieId.\n",
							"SouthridgeMovieId:           From Southridge, use the source id. From the others, use the source OnlineMovieId.\n",
							"ActorID:                     From Southridge, this is null. From the others, it's the source ActorId.\n",
							"ActorName:                   From Southridge, it's the exploded actor name. From the others, it is the ActorName.\n",
							"ActorGender:                 Southridge does not track this data. The on premises stores have Gender.\n",
							"Title:                       From Southridge, use title. From others, MovieTitle.\n",
							"Genre:                       From Southridge, use genre. From others, Category.\n",
							"Rating:                      Southridge has rating and the others have Rating.\n",
							"RuntimeMinutes:              Southridge has runtime, the others have RunTimeMin.\n",
							"TheatricalReleaseYear:       Southridge has releaseYear. The others don't have this data.\n",
							"PhysicalAvailabilityDate:    Southridge has availabilityDate. The others have ReleaseDate.\n",
							"StreamingAvailabilityDate:   Southridge has streamingAvailabilityDate. The others have no such data, as it does not apply to physical rentals.\n",
							"```\n",
							"\n",
							"### To join, cleanse, drop duplicates, etc. ... or not?\n",
							"\n",
							"At this stage, we want to focus on the **fatal** anomalies that would cause exceptions in downstream processing;\n",
							"e.g., inconsistent data types or formats.\n",
							"If we were loading this data directly into a final reporting schema, we would likely apply additional cleansing such as:\n",
							"\n",
							"- Look for and eliminate typos, e.g., PGg instead of PG\n",
							"- Normalize capitalization of titles, names, ratings, etc.\n",
							"- Look for and resolve conflicts in matched movies, e.g., Southridge thinks Mysterious Cube is a G-rated family movie while VanArsdel, Ltd. had it as a PG-13 rated Comedy\n",
							"- Look for variations in actor names and choose one to use consistently throughout the reporting schema, e.g., Vivica A. Fox vs Vivica Fox\n",
							"- Drop duplicates\n",
							"- etc., etc., etc.\n",
							"\n",
							"However, if we perform these operations now, then we may eliminate the opportunity to discover previously unrecognized value in the data.\n",
							"As a contrived example, consider a possibility that some actors and actresses would occassionally use their middle initial, but sometimes would not.\n",
							"Now, imagine that data scientists uncover a trend where films are more marketable when the cast does use their middle initial versus when they do not.\n",
							"Or maybe that only holds true in the Drama genre, but it does not hold in Family movies.\n",
							"If we have already chosen the person's \"usual\" billing and only kept that version in our conformed dataset,\n",
							"the the data scientists would never be able to see this."
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# This is used in the following cells to create a new unique identifier\n",
							"\n",
							"uuidUdf = F.udf(lambda : str(uuid.uuid4()), StringType())"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"sr_conformed = sr_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"id\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"id\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"availabilityDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    col(\"streamingAvailabilityDate\").cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"genre\").alias(\"Genre\"), \\\n",
							"    col(\"title\").alias(\"Title\"), \\\n",
							"    col(\"rating\").alias(\"Rating\"), \\\n",
							"    col(\"runtime\").alias(\"RuntimeMinutes\"), \\\n",
							"    col(\"releaseYear\").alias(\"TheatricalReleaseYear\"), \\\n",
							"    sr_catalog[\"actor.name\"].alias(\"ActorName\")]) \\\n",
							"  .withColumn(\"ActorId\", F.lit(None).cast(StringType())) \\\n",
							"  .withColumn(\"ActorGender\", F.lit(None).cast(StringType())) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# VanArsdel and Fourth Coffee are extremely similar\n",
							"\n",
							"va_conformed = va_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"MovieID\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"OnlineMovieID\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"ReleaseDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    F.lit(None).cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"Category\").alias(\"Genre\"), \\\n",
							"    col(\"MovieTitle\").alias(\"Title\"), \\\n",
							"    col(\"Rating\").alias(\"Rating\"), \\\n",
							"    col(\"RunTimeMin\").cast(LongType()).alias(\"RuntimeMinutes\"), \\\n",
							"    F.lit(None).cast(LongType()).alias(\"TheatricalReleaseYear\"), \\\n",
							"    col(\"ActorName\"), \\\n",
							"    col(\"MovieActorID\").alias(\"ActorID\"), \\\n",
							"    col(\"Gender\").alias(\"ActorGender\")]) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())\n",
							"\n",
							"fc_conformed = fc_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"MovieID\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"OnlineMovieID\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"ReleaseDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    F.lit(None).cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"Category\").alias(\"Genre\"), \\\n",
							"    col(\"MovieTitle\").alias(\"Title\"), \\\n",
							"    col(\"Rating\").alias(\"Rating\"), \\\n",
							"    col(\"RunTimeMin\").cast(LongType()).alias(\"RuntimeMinutes\"), \\\n",
							"    F.lit(None).cast(LongType()).alias(\"TheatricalReleaseYear\"), \\\n",
							"    col(\"ActorName\"), \\\n",
							"    col(\"MovieActorID\").alias(\"ActorID\"), \\\n",
							"    col(\"Gender\").alias(\"ActorGender\")]) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# The full catalog is now a straightforward union\n",
							"\n",
							"full_catalog = sr_conformed.union(va_conformed).union(fc_conformed)\n",
							"full_catalog.write.mode(\"overwrite\").parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/Normalized/catalog\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Let's rehydrate and confirm that everything checks out\n",
							"\n",
							"rehydrated_catalog = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/Normalized/catalog\")\n",
							"\n",
							"sr_rehydrated = rehydrated_catalog.filter(\"SourceSystemID=='SR'\")\n",
							"\n",
							"sr_actors_per_movie = sr_rehydrated \\\n",
							"  .groupby(col('SourceSystemMovieId')) \\\n",
							"  .agg(F.count(F.lit(1)).alias('ActorCount'))\n",
							"\n",
							"print('The number of rows from Southridge is ', sr_rehydrated.count())\n",
							"print('The number of distinct movies from Southridge is', sr_actors_per_movie.count())\n",
							"print(sr_actors_per_movie.limit(1).collect())"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Intermediate_Sales')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Openhackspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e6fcac13-b9bc-4f47-af3e-dfa48d717c6d/resourceGroups/mdw-oh-01-westeurope/providers/Microsoft.Synapse/workspaces/openhack-synapse-ec44/bigDataPools/Openhackspark",
						"name": "Openhackspark",
						"type": "Spark",
						"endpoint": "https://openhack-synapse-ec44.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Openhackspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import uuid\n",
							"import pyspark.sql.functions as F\n",
							"from pyspark.sql.functions import col\n",
							"from pyspark.sql.types import StringType,DateType,LongType,IntegerType,TimestampType"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"# Collect the raw Sales data from all source systems"
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## From Cloud Sales\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"cs_orders = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/CloudSales/dboOrders.csv\", header='true', inferSchema='true')\n",
							"cs_orderdetails = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/CloudSales/dboOrderDetails.csv\", header='true', inferSchema='true')\n",
							"\n",
							"cs_sales = cs_orders \\\n",
							".join(cs_orderdetails, on='OrderId', how='left')\n",
							"\n",
							"cs_sales.head(5)\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## From Cloud Streaming\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"cstr_sales=spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/CloudStreaming/dboTransactions.csv\",header='true',inferSchema='true')\n",
							"cstr_sales.head(5)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## From Fourth Coffee"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"fc_sales = spark.read.csv(\"abfss://rawzone@openhackec44.dfs.core.windows.net/FouthCoffee/Transactions.csv\", header='true', inferSchema='true')\n",
							"fc_sales.head(1)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## From VanArsdel"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"va_sales = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboTransactions.parquet\")\n",
							"va_sales.printSchema()\n",
							"va_sales.head(1)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"cs_sales = cs_sales \\\n",
							".withColumn('OrderDate',F.to_date(col('OrderDate'), 'MM-dd-yyyy')) \\\n",
							".withColumn('SourceSystemId', F.lit('SR'))\n",
							"\n",
							"cstr_sales = cstr_sales \\\n",
							".withColumn('CreatedDate',F.to_date(col('CreatedDate'), 'MM-dd-yyyy')) \\\n",
							".withColumn('SourceSystemId', F.lit('SR'))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"cs_sales.head(1)\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"cstr_sales.head(1)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"#exemple format date : 20170103\n",
							"  \n",
							"fc_sales = fc_sales \\\n",
							"  .withColumn('RentalDate', F.to_date((col('RentalDate').cast(StringType())), 'MM-dd-yyyy')) \\\n",
							"  .withColumn('SourceSystemId', F.lit('FC'))\n",
							"  "
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							"fc_sales.head(1)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Unioning the data\n",
							"\n",
							"### Target schema\n",
							"\n",
							"Looking ahead, we will keep every source record from every catalog, so we don't need to join here.\n",
							"However, we will need to map columns to a consistent schema.\n",
							"\n",
							"```\n",
							"SourceSystemId:              Use the SourceSystemId we added in the previous cell.\n",
							"CatalogId:                   Use a new unique identifier.\n",
							"SourceSystemMovieId:         From Southridge, use the source id. From the others, use the source MovieId.\n",
							"SouthridgeMovieId:           From Southridge, use the source id. From the others, use the source OnlineMovieId.\n",
							"ActorID:                     From Southridge, this is null. From the others, it's the source ActorId.\n",
							"ActorName:                   From Southridge, it's the exploded actor name. From the others, it is the ActorName.\n",
							"ActorGender:                 Southridge does not track this data. The on premises stores have Gender.\n",
							"Title:                       From Southridge, use title. From others, MovieTitle.\n",
							"Genre:                       From Southridge, use genre. From others, Category.\n",
							"Rating:                      Southridge has rating and the others have Rating.\n",
							"RuntimeMinutes:              Southridge has runtime, the others have RunTimeMin.\n",
							"TheatricalReleaseYear:       Southridge has releaseYear. The others don't have this data.\n",
							"PhysicalAvailabilityDate:    Southridge has availabilityDate. The others have ReleaseDate.\n",
							"StreamingAvailabilityDate:   Southridge has streamingAvailabilityDate. The others have no such data, as it does not apply to physical rentals.\n",
							"```\n",
							"\n",
							"### To join, cleanse, drop duplicates, etc. ... or not?\n",
							"\n",
							"At this stage, we want to focus on the **fatal** anomalies that would cause exceptions in downstream processing;\n",
							"e.g., inconsistent data types or formats.\n",
							"If we were loading this data directly into a final reporting schema, we would likely apply additional cleansing such as:\n",
							"\n",
							"- Look for and eliminate typos, e.g., PGg instead of PG\n",
							"- Normalize capitalization of titles, names, ratings, etc.\n",
							"- Look for and resolve conflicts in matched movies, e.g., Southridge thinks Mysterious Cube is a G-rated family movie while VanArsdel, Ltd. had it as a PG-13 rated Comedy\n",
							"- Look for variations in actor names and choose one to use consistently throughout the reporting schema, e.g., Vivica A. Fox vs Vivica Fox\n",
							"- Drop duplicates\n",
							"- etc., etc., etc.\n",
							"\n",
							"However, if we perform these operations now, then we may eliminate the opportunity to discover previously unrecognized value in the data.\n",
							"As a contrived example, consider a possibility that some actors and actresses would occassionally use their middle initial, but sometimes would not.\n",
							"Now, imagine that data scientists uncover a trend where films are more marketable when the cast does use their middle initial versus when they do not.\n",
							"Or maybe that only holds true in the Drama genre, but it does not hold in Family movies.\n",
							"If we have already chosen the person's \"usual\" billing and only kept that version in our conformed dataset,\n",
							"the the data scientists would never be able to see this."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# This is used in the following cells to create a new unique identifier\n",
							"\n",
							"uuidUdf = F.udf(lambda : str(uuid.uuid4()), StringType())"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"source": [
							"sr_conformed = sr_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"id\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"id\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"availabilityDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    col(\"streamingAvailabilityDate\").cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"genre\").alias(\"Genre\"), \\\n",
							"    col(\"title\").alias(\"Title\"), \\\n",
							"    col(\"rating\").alias(\"Rating\"), \\\n",
							"    col(\"runtime\").alias(\"RuntimeMinutes\"), \\\n",
							"    col(\"releaseYear\").alias(\"TheatricalReleaseYear\"), \\\n",
							"    sr_catalog[\"actor.name\"].alias(\"ActorName\")]) \\\n",
							"  .withColumn(\"ActorId\", F.lit(None).cast(StringType())) \\\n",
							"  .withColumn(\"ActorGender\", F.lit(None).cast(StringType())) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"source": [
							"# VanArsdel and Fourth Coffee are extremely similar\n",
							"\n",
							"va_conformed = va_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"MovieID\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"OnlineMovieID\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"ReleaseDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    F.lit(None).cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"Category\").alias(\"Genre\"), \\\n",
							"    col(\"MovieTitle\").alias(\"Title\"), \\\n",
							"    col(\"Rating\").alias(\"Rating\"), \\\n",
							"    col(\"RunTimeMin\").cast(LongType()).alias(\"RuntimeMinutes\"), \\\n",
							"    F.lit(None).cast(LongType()).alias(\"TheatricalReleaseYear\"), \\\n",
							"    col(\"ActorName\"), \\\n",
							"    col(\"MovieActorID\").alias(\"ActorID\"), \\\n",
							"    col(\"Gender\").alias(\"ActorGender\")]) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())\n",
							"\n",
							"fc_conformed = fc_catalog \\\n",
							"  .select([ \\\n",
							"    col(\"SourceSystemId\"), \\\n",
							"    col(\"MovieID\").alias(\"SourceSystemMovieId\"), \\\n",
							"    col(\"OnlineMovieID\").alias(\"SouthridgeMovieId\"), \\\n",
							"    col(\"ReleaseDate\").cast(TimestampType()).alias(\"PhysicalAvailabilityDate\"), \\\n",
							"    F.lit(None).cast(TimestampType()).alias(\"StreamingAvailabilityDate\"), \\\n",
							"    col(\"Category\").alias(\"Genre\"), \\\n",
							"    col(\"MovieTitle\").alias(\"Title\"), \\\n",
							"    col(\"Rating\").alias(\"Rating\"), \\\n",
							"    col(\"RunTimeMin\").cast(LongType()).alias(\"RuntimeMinutes\"), \\\n",
							"    F.lit(None).cast(LongType()).alias(\"TheatricalReleaseYear\"), \\\n",
							"    col(\"ActorName\"), \\\n",
							"    col(\"MovieActorID\").alias(\"ActorID\"), \\\n",
							"    col(\"Gender\").alias(\"ActorGender\")]) \\\n",
							"  .withColumn(\"CatalogId\", uuidUdf())"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"source": [
							"# The full catalog is now a straightforward union\n",
							"\n",
							"full_catalog = sr_conformed.union(va_conformed).union(fc_conformed)\n",
							"full_catalog.write.mode(\"overwrite\").parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/Normalized/catalog\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							"# Let's rehydrate and confirm that everything checks out\n",
							"\n",
							"rehydrated_catalog = spark.read.parquet(\"abfss://rawzone@openhackec44.dfs.core.windows.net/Normalized/catalog\")\n",
							"\n",
							"sr_rehydrated = rehydrated_catalog.filter(\"SourceSystemID=='SR'\")\n",
							"\n",
							"sr_actors_per_movie = sr_rehydrated \\\n",
							"  .groupby(col('SourceSystemMovieId')) \\\n",
							"  .agg(F.count(F.lit(1)).alias('ActorCount'))\n",
							"\n",
							"print('The number of rows from Southridge is ', sr_rehydrated.count())\n",
							"print('The number of distinct movies from Southridge is', sr_actors_per_movie.count())\n",
							"print(sr_actors_per_movie.limit(1).collect())"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://rawzone@openhackec44.dfs.core.windows.net/VanArsdelLTD/dboMovies.txt', format='text')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "Openhackspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/e6fcac13-b9bc-4f47-af3e-dfa48d717c6d/resourceGroups/mdw-oh-01-westeurope/providers/Microsoft.Synapse/workspaces/openhack-synapse-ec44/bigDataPools/Openhackspark",
						"name": "Openhackspark",
						"type": "Spark",
						"endpoint": "https://openhack-synapse-ec44.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Openhackspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://rawzone@openhackec44.dfs.core.windows.net/Movies/movies.json', format='json')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/openhackdec44')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		}
	]
}