{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RentalParquet",
						"type": "DatasetReference"
					},
					"name": "VanArsdelRental"
				},
				{
					"dataset": {
						"referenceName": "Fourthcoffeerental",
						"type": "DatasetReference"
					},
					"name": "FourthCoffee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Rentals",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AddSystemIDVanArsdel"
				},
				{
					"name": "AddSystemIDFourthCoffee"
				},
				{
					"name": "SelectVanArsdel"
				},
				{
					"name": "Select4Coffeefields"
				},
				{
					"name": "Union 4coofee&VanArsdel"
				}
			],
			"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as integer,\n\t\tReturnDate as integer,\n\t\tRentalCost as decimal(19,4),\n\t\tLateFee as decimal(19,4),\n\t\tRewindFlag as boolean,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanArsdelRental\nsource(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as string,\n\t\tReturnDate as string,\n\t\tRentalCost as string,\n\t\tLateFee as string,\n\t\tRewindFlag as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffee\nVanArsdelRental derive(RentalDate = toDate(RentalDate),\n\t\tReturnDate = toDate(RentalDate),\n\t\tSourceID = 2,\n\t\tUniqueTransactionID = concat(toString(2), toString(uuid())),\n\t\tUniqueCustomerID = concat(toString(2), CustomerID),\n\t\tUniqueMovieID = concat(toString(2), MovieID),\n\t\tLateFee = toFloat(LateFee)) ~> AddSystemIDVanArsdel\nFourthCoffee derive(CreatedDate = toDate(CreatedDate),\n\t\tUpdatedDate = toDate(UpdatedDate),\n\t\tRentalCost = toFloat(RentalCost),\n\t\tLateFee = toFloat(LateFee),\n\t\tSourceId = 3,\n\t\tUniqueTransactionID = concat(toString(3), toString(uuid())),\n\t\tModifiedRentaldate = toDate(substring(RentalDate, 1,4)+\"-\"+substring(RentalDate, 5,2)+\"-\"+substring(RentalDate, 7,2)),\n\t\tModifiedReturnDate = toDate(substring(ReturnDate, 1,4)+\"-\"+substring(ReturnDate, 5,2)+\"-\"+substring(ReturnDate, 7,2)),\n\t\tUniqueCustomerID = concat(toString(3), CustomerID),\n\t\tUniqueMovieID = concat(toString(3),MovieID),\n\t\tRewindFlag = toBinary(RewindFlag)) ~> AddSystemIDFourthCoffee\nAddSystemIDVanArsdel select(mapColumn(\n\t\tSourceID,\n\t\tUniqueTransactionID,\n\t\tTransactionID,\n\t\tUniqueCustomerID,\n\t\tCustomerID,\n\t\tUniqueMovieID,\n\t\tMovieID,\n\t\tRentalDate,\n\t\tReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tCreatedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVanArsdel\nAddSystemIDFourthCoffee select(mapColumn(\n\t\tSourceID = SourceId,\n\t\tUniqueTransactionID,\n\t\tTransactionID,\n\t\tUniqueCustomerID,\n\t\tCustomerID,\n\t\tUniqueMovieID,\n\t\tMovieID,\n\t\tRentalDate = ModifiedRentaldate,\n\t\tReturnDate = ModifiedReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tCreatedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4Coffeefields\nSelectVanArsdel, Select4Coffeefields union(byName: true)~> Union 4coofee&VanArsdel\nUnion 4coofee&VanArsdel sink(input(\n\t\tSourceSystemId as string,\n\t\tSourceSystemMovieId as string,\n\t\tSouthridgeMovieId as string,\n\t\tPhysicalAvailabilityDate as timestamp,\n\t\tStreamingAvailabilityDate as timestamp,\n\t\tGenre as string,\n\t\tTitle as string,\n\t\tRating as string,\n\t\tRuntimeMinutes as long,\n\t\tTheatricalReleaseYear as long,\n\t\tActorName as string,\n\t\tActorId as string,\n\t\tActorGender as string,\n\t\tCatalogId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}